# .github/workflows/deploy.yml
---
name: Deploy Serverless Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  TF_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ./terraform

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: Get Terraform Outputs
      id: terraform_outputs
      run: |
        echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        echo "lambda_function=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
        echo "api_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Display Deployment Info
      run: |
        echo "🚀 Deployment Successful!"
        echo "�� S3 Bucket: ${{ steps.terraform_outputs.outputs.s3_bucket }}"
        echo "⚡ Lambda Function: ${{ steps.terraform_outputs.outputs.lambda_function }}"
        echo "🌐 API Gateway URL: ${{ steps.terraform_outputs.outputs.api_url }}"

    - name: Test API Gateway
      run: |
        curl -X GET "${{ steps.terraform_outputs.outputs.api_url }}" \
          -H "Content-Type: application/json" \
          -w "HTTP Status: %{http_code}\n"

  lambda-update:
    name: 'Update Lambda Function'
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform (for outputs)
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Get Lambda Function Name
      id: get_lambda_name
      run: |
        cd terraform
        terraform init
        echo "lambda_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT

    - name: Create Lambda deployment package
      run: |
        cd lambda
        zip -r ../lambda_function.zip .

    - name: Update Lambda function code
      run: |
        aws lambda update-function-code \
          --function-name ${{ steps.get_lambda_name.outputs.lambda_name }} \
          --zip-file fileb://lambda_function.zip
...
