name: Deploy Serverless Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  TF_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # This is crucial to prevent debug output

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: ./terraform
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # This is crucial to prevent debug output

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}

      - name: Get Terraform Outputs
        id: terraform_outputs
        run: |
          cd terraform

          echo "=== Extracting Output Values ==="
          
          # Use terraform output -json to get clean output
          terraform output -json > tf_outputs.json
          
          # Extract values using jq
          S3_BUCKET=$(jq -r '.s3_bucket_name.value // empty' tf_outputs.json)
          LAMBDA_FUNCTION=$(jq -r '.lambda_function_name.value // empty' tf_outputs.json)
          API_URL=$(jq -r '.api_gateway_url.value // empty' tf_outputs.json)

          echo "Raw values extracted:"
          echo "S3_BUCKET='$S3_BUCKET'"
          echo "LAMBDA_FUNCTION='$LAMBDA_FUNCTION'"
          echo "API_URL='$API_URL'"

          # Validate API_URL
          if [ -z "$API_URL" ] || [ "$API_URL" = "null" ]; then
            echo "❌ Error: api_gateway_url output not found or empty"
            echo "Available outputs:"
            cat tf_outputs.json
            exit 1
          fi

          # Set GitHub outputs
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "lambda_function=$LAMBDA_FUNCTION" >> $GITHUB_OUTPUT
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT

      - name: Test API Gateway
        run: |
          API_URL="${{ steps.terraform_outputs.outputs.api_url }}"

          echo "🌐 Testing API Gateway at: $API_URL"

          # Validate URL format
          if ! [[ "$API_URL" =~ ^https?:// ]]; then
            echo "❌ Error: API URL does not appear to be a valid URL: $API_URL"
            exit 1
          fi

          # Test the API
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X GET "$API_URL" \
            -H "Content-Type: application/json" \
            --max-time 30 \
            --fail-with-body || echo "000")

          echo "HTTP Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "✅ API Gateway test successful!"
          elif [ "$HTTP_STATUS" = "000" ]; then
            echo "❌ Failed to connect to API Gateway"
            exit 1
          else
            echo "⚠️  API Gateway returned status: $HTTP_STATUS"
            # Don't exit with error for 4xx/5xx as the infrastructure might be working
            # but the endpoint might return errors by design
          fi

  lambda-update:
    name: 'Update Lambda Function'
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform (for outputs)
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false  # This is crucial to prevent debug output

      - name: Get Lambda Function Name
        id: get_lambda_name
        run: |
          cd terraform
          terraform init
          terraform output -json > tf_outputs.json
          LAMBDA_NAME=$(jq -r '.lambda_function_name.value // empty' tf_outputs.json)
          
          if [ -z "$LAMBDA_NAME" ] || [ "$LAMBDA_NAME" = "null" ]; then
            echo "❌ Error: lambda_function_name output not found"
            echo "Available outputs:"
            cat tf_outputs.json
            exit 1
          fi
          
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT

      - name: Create Lambda deployment package
        run: |
          cd lambda
          zip -r ../lambda_function.zip .

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.get_lambda_name.outputs.lambda_name }} \
            --zip-file fileb://lambda_function.zip
